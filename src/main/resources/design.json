{
  "title": "设计原则",
  "remark": "设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同。其中，开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；单一职责原则告诉我们实现类要职责单一；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合度；合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。",
  "items": [
    {
      "title": "开闭原则",
      "url": "http://c.biancheng.net/view/1322.html",
      "interpretation": "当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。",
      "realization": "可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中"
    },
    {
      "title": "里氏替换原则",
      "url": "http://c.biancheng.net/view/1324.html",
      "interpretation": "继承必须确保超类所拥有的性质在子类中仍然成立",
      "realization": "里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。"
    },
    {
      "title": "依赖倒置原则",
      "url": "http://c.biancheng.net/view/1326.html",
      "interpretation": "高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象;其核心思想是：要面向接口编程，不要面向实现编程",
      "realization": "1.每个类尽量提供接口或抽象类，或者两者都具备;2.变量的声明类型尽量是接口或者是抽象类。3.任何类都不应该从具体类派生。;4.使用继承时尽量遵循里氏替换原则。"
    },
    {
      "title": "单一职责原则",
      "url": "http://c.biancheng.net/view/1327.html",
      "interpretation": "单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分",
      "realization": "单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中。而发现类的多重职责需要设计人员具有较强的分析设计能力和相关重构经验。"
    },
    {
      "title": "接口隔离原则",
      "url": "http://c.biancheng.net/view/1330.html",
      "interpretation": "要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。",
      "realization": "1.接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。;2.为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。3.了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。;4.提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。"
    },
    {
      "title": "迪米特法则-最少知识原则",
      "url": "http://c.biancheng.net/view/1331.html",
      "interpretation": "如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。",
      "realization": "1.从依赖者的角度来说，只依赖应该依赖的对象。2.从被依赖者的角度说，只暴露应该暴露的方法。"
    },
    {
      "title": "合成复用原则",
      "url": "http://c.biancheng.net/view/1333.html",
      "interpretation": "尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。",
      "realization": "合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用."
    }
  ]
}